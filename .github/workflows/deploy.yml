name: Deploy Node.js to Elastic Beanstalk

on:
  push:
    branches:
      - main   # change to 'master' if thatâ€™s your default branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install

      - name: Package app
        run: zip -r app.zip . -x '*.git*'

      - name: Get Node.js version from package.json
        id: node_version
        run: |
          VERSION=$(jq -r '.engines.node' package.json)
          VERSION_CLEAN=${VERSION#\^}
          VERSION_CLEAN=${VERSION_CLEAN#\~}
          echo "NODE_VERSION=$VERSION_CLEAN" >> $GITHUB_ENV
          echo "Node.js version from package.json: $VERSION_CLEAN"

      - name: Deploy to Elastic Beanstalk
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EB_APPLICATION_NAME: ${{ secrets.EB_APPLICATION_NAME }}
          EB_ENVIRONMENT_NAME: ${{ secrets.EB_ENVIRONMENT_NAME }}
          NODE_VERSION: ${{ env.NODE_VERSION }}
        run: |
          VERSION_LABEL="v-${{ github.run_number }}"
          echo "Deploying version: $VERSION_LABEL to environment: $EB_ENVIRONMENT_NAME"

          # Configure AWS CLI
          aws configure set region $AWS_REGION
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY

          # Check if environment exists
          ENV_CHECK=$(aws elasticbeanstalk describe-environments \
            --application-name "$EB_APPLICATION_NAME" \
            --environment-names "$EB_ENVIRONMENT_NAME" \
            --query "Environments[0].EnvironmentName" \
            --output text)

          if [ "$ENV_CHECK" = "None" ] || [ -z "$ENV_CHECK" ]; then
            echo "Environment $EB_ENVIRONMENT_NAME does not exist. Please create it first using 'eb create'."
            exit 1
          fi

          # Create new application version
          aws elasticbeanstalk create-application-version \
            --application-name "$EB_APPLICATION_NAME" \
            --version-label "$VERSION_LABEL" \
            --source-bundle S3Bucket="elasticbeanstalk-$AWS_REGION-$AWS_ACCOUNT_ID",S3Key="app.zip" || true

          # Update environment to new version
          aws elasticbeanstalk update-environment \
            --environment-name "$EB_ENVIRONMENT_NAME" \
            --version-label "$VERSION_LABEL"

